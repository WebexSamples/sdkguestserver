<div id="status"></div>


<!-- Single Party Call HTML -->
<form id="call-controls">
  <fieldset>
    <button class="cui-button cui-button--blue" id="call" title="call" type="button" disabled >Call</button>
    <button class="cui-button cui-button--red" id="hangup" title="hangup" type="button" disabled>Hangup</button>
  </fieldset>
</form>

<div style="display: flex">
  <div id="self-video" style="width: 400px;">
    <video style="width:100%; height: auto;" id="self-view" muted autoplay></video>
  </div>
  <div id="remote-video" style="width: 400px;">
    <audio id="remote-view-audio" autoplay></audio>
    <video id="remote-view-video" autoplay style="width:100%; height: auto;"></video>
  </div>
</div>

<script>
  // Initialize the SDK
  const spark = ciscospark.init({
    config: {
      phone: {
        // Turn on group calling; there's a few minor breaking changes with
        // regards to how single-party calling works (hence, the opt-in), but
        // this is how things are going to work in 2.0 and if you plan on
        // doing any group calls, you'll need this turned on for your entire
        // app anyway.
        enableExperimentalGroupCallingSupport: true
      }
    }
  });

  // Get our guest token from the server
  const jwt = '<%=locals.token%>';

  // Add some shortcuts to html elements on the page
  const statusDiv = document.getElementById('status');
  const callButton = document.getElementById('call');
  const hangupButton = document.getElementById('hangup');

  // Set our status
  statusDiv.innerHTML = 'Loading';

  // Register our browser with Webex Teams calling
  function registerWithWebexTeamsCalling() {
    spark.phone.register()
      .then(() => {
        // Enable our call button
        callButton.disabled = false;
        statusDiv.innerHTML = 'Connected: Ready to call';
      })
      .catch((err) => {
        console.error(err);
        statusDiv.innerHTML('Unable to connect');
      });
  }


  // Places a call to the given destination
  function placeCall(destination) {
    callButton.disabled = true;
    const call = spark.phone.dial(destination);
    statusDiv.innerHTML = 'Calling!';

    call.on('error', (err) => {
      console.error(err);
      alert(err.stack);
    });

    // Add the self view
    call.once('localMediaStream:change', () => {
      document.getElementById('self-view').srcObject = call.localMediaStream;
    });

    call.on('remoteMediaStream:change', () => {
      // Ok, yea, this is a little weird. There's a Chrome behavior that prevents
      // audio from playing from a video tag if there is no corresponding video
      // track.
      [
        'audio',
        'video'
      ].forEach((kind) => {
        if (call.remoteMediaStream) {
          const track = call.remoteMediaStream.getTracks().find((t) => t.kind === kind);
          if (track) {
            document.getElementById(`remote-view-${kind}`).srcObject = new MediaStream([track]);
          }
          statusDiv.innerHTML = 'Connected!';
        }
      });
    });

    // Once the call ends, we'll want to clean up our UI a bit
    call.on('inactive', () => {
      // Remove the streams from the UI elements
      document.getElementById('self-view').srcObject = undefined;
      document.getElementById('remote-view-audio').srcObject = undefined;
      document.getElementById('remote-view-video').srcObject = undefined;
      statusDiv.innerHTML = 'Connected: Ready to call';
      callButton.disabled = false;
      hangupButton.disabled = true;
    });

    // Of course, we'd also like to be able to end the call:
    hangupButton.disabled = false;
    hangupButton.addEventListener('click', () => {
      call.hangup();
    });
  }

  spark.once('ready', () => {
    statusDiv.innerHTML = 'Authorizing';
    spark.authorization.requestAccessTokenFromJwt({jwt}).then(() => {
        if (spark.canAuthorize) {
          // Authorization is successful
          // Change Authentication status to `Authorized`
          statusDiv.innerHTML = 'Authorized!';

          registerWithWebexTeamsCalling();
        }
      })
        .catch((e) => {
          // Do something with the auth error here
          console.error(e);
          statusDiv.innerHTML = 'Unable to Login.';
        });
    });

  // Call Button Click
  callButton.addEventListener('click', (event) => {
    // we don't want to reload when we try to dial
    event.preventDefault();

    placeCall('roomkit@sparkdemos.com');
  });
</script>